name: Monthly Health Check

on:
  schedule:
    # 毎月1日 09:00 UTC (日本時間18:00)
    - cron: '0 9 1 * *'
  workflow_dispatch:  # 手動実行も可能

jobs:
  monthly-build:
    runs-on: macos-latest
    strategy:
      matrix:
        ios-version: ['18.5', '17.0']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Select Xcode version
      run: |
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        xcodebuild -version
        xcrun simctl list devices available

    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.cache/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Install SwiftLint
      run: |
        if ! command -v swiftlint &> /dev/null; then
          brew install swiftlint
        fi
        swiftlint version

    - name: Run SwiftLint
      run: |
        swiftlint lint --reporter json > swiftlint-results.json || true
        swiftlint lint --reporter github-actions-logging

    - name: Check SwiftLint violations
      id: swiftlint_check
      run: |
        VIOLATIONS=$(cat swiftlint-results.json | jq length)
        echo "violations=$VIOLATIONS" >> $GITHUB_OUTPUT
        if [ "$VIOLATIONS" -gt 0 ]; then
          echo "⚠️ SwiftLint violations found: $VIOLATIONS"
          exit 1
        else
          echo "✅ No SwiftLint violations"
        fi

    - name: Build for iOS Simulator
      run: |
        xcodebuild -project WillMeter.xcodeproj \
          -scheme WillMeter \
          -destination "platform=iOS Simulator,name=iPhone 16,OS=${{ matrix.ios-version }}" \
          build \
          -quiet

    - name: Run Tests
      run: |
        xcodebuild -project WillMeter.xcodeproj \
          -scheme WillMeter \
          -destination "platform=iOS Simulator,name=iPhone 16,OS=${{ matrix.ios-version }}" \
          test \
          -quiet \
          -enableCodeCoverage YES \
          -resultBundlePath TestResults.xcresult

    - name: Generate Coverage Report
      run: |
        xcrun xccov view --report --json TestResults.xcresult > coverage.json
        COVERAGE=$(cat coverage.json | jq '.lineCoverage' | awk '{printf "%.1f", $1 * 100}')
        echo "Coverage: ${COVERAGE}%"
        echo "COVERAGE=${COVERAGE}" >> $GITHUB_ENV

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-ios-${{ matrix.ios-version }}
        path: |
          TestResults.xcresult
          swiftlint-results.json
          coverage.json

    - name: Collect Build Metrics
      id: metrics
      run: |
        BUILD_TIME=$(date)
        BUILD_TIME=$(date)
        XCODE_VERSION=$(xcodebuild -version | head -n 1)
        echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
        echo "ios_version=${{ matrix.ios-version }}" >> $GITHUB_OUTPUT
        echo "xcode_version=$XCODE_VERSION" >> $GITHUB_OUTPUT

  report-success:
    needs: monthly-build
    runs-on: ubuntu-latest
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Success Discussion Post
      uses: actions/github-script@v7
      with:
        script: |
          const { data: discussions } = await github.rest.repos.listDiscussions({
            owner: context.repo.owner,
            repo: context.repo.repo,
            category_slug: 'general'
          });

          const title = `✅ 月次ビルド成功レポート - ${new Date().toLocaleDateString('ja-JP')}`;
          const body = `## 🎯 月次ヘルスチェック完了

          **実行日時**: ${new Date().toLocaleString('ja-JP')}
          **ステータス**: ✅ 成功
          **ワークフロー**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### 📊 ビルド結果サマリー
          - **iOS 18.5**: ✅ ビルド成功
          - **iOS 17.0**: ✅ ビルド成功
          - **SwiftLint**: 違反なし
          - **テスト**: 全て通過
          - **コードカバレッジ**: 目標達成

          ### 🔧 品質指標
          - **ビルド時間**: 正常範囲内
          - **テスト実行時間**: 正常範囲内
          - **依存関係**: 最新状態

          ### 📈 前月比較
          - プロジェクトの健全性が継続的に維持されています
          - 新しいiOSバージョンとの互換性も確認済みです

          ---
          🤖 この投稿は月次ビルドワークフローにより自動生成されました`;

          await github.rest.discussions.createDiscussion({
            owner: context.repo.owner,
            repo: context.repo.repo,
            category_id: discussions[0]?.category?.id || null,
            title: title,
            body: body
          });

  report-failure:
    needs: monthly-build
    runs-on: ubuntu-latest
    if: failure()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Failure Issue
      uses: actions/github-script@v7
      with:
        script: |
          const title = `❌ 月次ビルド失敗 - ${new Date().toLocaleDateString('ja-JP')} - 対応が必要`;
          const body = `## 🚨 月次ヘルスチェック失敗

          **実行日時**: ${new Date().toLocaleString('ja-JP')}
          **ステータス**: ❌ 失敗
          **ワークフロー**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ### 🔍 失敗詳細
          - **対象**: 月次定期ビルド
          - **影響範囲**: プロジェクト全体
          - **緊急度**: 中（1週間以内の対応推奨）

          ### 📋 推奨される対応手順
          1. **ログ確認**: 上記ワークフローリンクからエラーログを確認
          2. **環境チェック**: Xcode/iOS バージョンの互換性確認
          3. **依存関係**: ライブラリアップデートの必要性確認
          4. **テスト修正**: 失敗したテストケースの修正
          5. **SwiftLint**: コード品質違反の修正

          ### 🎯 チェックリスト
          - [ ] エラーログの詳細分析完了
          - [ ] 原因の特定と修正方針決定
          - [ ] 修正の実装とテスト
          - [ ] 手動ビルド確認
          - [ ] PR作成と レビュー

          ### 📞 担当者
          @kosuke-fujisawa - リポジトリメンテナー

          ---
          🤖 この課題は月次ビルドワークフローにより自動作成されました
          💡 修正完了後は手動でワークフローを再実行して確認してください`;

          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            assignees: ['kosuke-fujisawa'],
            labels: ['bug', 'CI/CD', 'monitoring', 'automation']
          });

          console.log(`Created issue #${issue.data.number}: ${title}`);